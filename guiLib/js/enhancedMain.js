// Generated by CoffeeScript 1.7.1
var Button, Dialog, LoadedItem, choosePort, configPage, gui, historyItem, loadHistory, path, reloadHistory;

gui = require('nw.gui');

path = require('path');

Button = Remix.create({
  template: '<button type="button" class="btn"></button>',
  remixEvent: {
    'click': 'clickCallback'
  },
  render: function(data) {
    this.node.attr('class', "btn btn-" + data.type + " btn-" + data.size);
    this.node.text(data.title);
    return this.clickCallback = data.onclick;
  }
});

LoadedItem = Remix.create({
  remixChild: {
    Button: Button
  },
  template: "<div class=\"col-sm-6 col-md-4\" style=\"display: none\">\n	<div class=\"panel panel-primary\">\n		<div class=\"panel-heading\">\n			<button remix=\"Button\" data-type=\"danger\" data-size=\"xs\" data-onclick=\"@unloadProject\" data-title=\"X\" key=\"unloadBtn\"></button> &nbsp;&nbsp;<span ref=\"pathtxt\"></span>\n		</div>\n		<div class=\"panel-body\">\n			\n			<ul class=\"list-group\" ref=\"urlList\">\n				\n			</ul>\n\n			<div class=\"alert alert-info alert-dismissible\" role=\"alert\" ref=\"alert\" style=\"display: none;\">\n			  <button type=\"button\" class=\"close\" data-dismiss=\"alert\" ref=\"closeAlert\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n			  <div ref=\"alertMsg\"></div>\n			</div>\n		</div>\n		<div class=\"panel-footer\">\n			<p class=\"text-right\">\n	  			<button remix=\"Button\" data-type=\"primary\" data-size=\"xs\" data-onclick=\"@configProject\" data-title=\"配置\" key=\"configBtn\"></button>\n	  			<button remix=\"Button\" data-type=\"info\" data-size=\"xs\" data-onclick=\"@openDirectory\" data-title=\"打开目录\" key=\"openDirBtn\"></button>\n	  			<button remix=\"Button\" data-type=\"danger\" data-size=\"xs\" data-onclick=\"@packProject\" data-title=\"打包\" key=\"packBtn\"></button>\n		  	</p>\n		</div>\n	</div>\n</div>",
  remixEvent: {
    'click, li a, urlList': 'openLink',
    'change, li [type="radio"], urlList': 'switchRoot',
    'click, closeAlert': 'closeMsg'
  },
  onNodeCreated: function() {
    return this.appendTo('#loaded-container');
  },
  render: function(data) {
    this.refs.pathtxt.text(data.path);
    this.refs.urlList.empty();
    data.urls.forEach((function(_this) {
      return function(url) {
        return _this.refs.urlList.append("<li class=\"list-group-item\"><a href=\"" + url + "\">" + url + "</a><span style=\"float:right\"><input type=\"radio\" name=\"root\" data-url=\"" + url + "\"></span></li>");
      };
    })(this));
    this.unloadProject = data.unloadProject;
    return this.node.slideDown('fast');
  },
  closeMsg: function() {
    return this.refs.alert.slideUp();
  },
  openLink: function(e) {
    var $this;
    e.preventDefault();
    $this = $(e.target);
    return gui.Shell.openExternal($this.attr('href'));
  },
  openDirectory: function() {
    var projPath;
    projPath = this.refs.pathtxt.text();
    return gui.Shell.showItemInFolder(projPath);
  },
  configProject: function() {
    return configPage(this.key);
  },
  switchRoot: function(e) {
    return this.state.switchRoot($(e.target).data('url'));
  },
  packProject: function() {
    return packProject(this.key, this.refs.pathtxt.text(), this);
  },
  slideDestroy: function() {
    return this.node.slideUp('fast', (function(_this) {
      return function() {
        return _this.destroy();
      };
    })(this));
  },
  openOutput: function() {
    var projPath;
    projPath = path.join(this.refs.pathtxt.text(), 'output');
    return gui.Shell.showItemInFolder(projPath);
  },
  msg: function(msg) {
    this.refs.alertMsg.html(msg);
    return this.refs.alert.slideDown();
  }
});

historyItem = Remix.create({
  remixChild: {
    Button: Button
  },
  template: "<li class=\"list-group-item\">\n	<span ref=\"projPath\" class=\"pathTitle\" title=\"\"></span>\n	<span class=\"pull-right\"><button type=\"button\" remix=\"Button\" class=\"btn btn-info btn-xs\" data-type=\"info\" data-size=\"xs\" data-title=\"装载\" data-onclick=\"@loadProject\">装载</button>\n	</span>\n</li>",
  loadProject: function() {
    var projectPath;
    projectPath = this.key;
    return loadProject(this.key);
  },
  render: function() {
    return this.refs.projPath.text(this.key).attr('title', this.key);
  }
});

loadHistory = Remix.create({
  remixChild: {
    historyItem: historyItem
  },
  template: '<ul class="list-group"></ul>',
  onNodeCreated: function() {
    return $('#historyContainer').empty().append(this.node);
  },
  render: function(data) {
    var history, storedPaths, _i, _len, _results;
    storedPaths = getProjectPaths();
    _results = [];
    for (_i = 0, _len = storedPaths.length; _i < _len; _i++) {
      history = storedPaths[_i];
      _results.push(this.append(this.historyItem(null, history)));
    }
    return _results;
  }
});

reloadHistory = loadHistory;

Dialog = Remix.create({
  template: "<div class=\"modal\">\n	<div class=\"modal-backdrop fade in\"></div>\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" aria-label=\"Close\"><span aria-hidden=\"true\" ref=\"closeButton\">&times;</span></button>\n        <h4 class=\"modal-title\" ref=\"title\">Modal title</h4>\n      </div>\n      <div class=\"modal-body\" ref=\"body\">\n        <p>Loading...</p>\n      </div>\n      <div class=\"modal-footer\" ref=\"footer\">\n      	\n      </div>\n    </div><!-- /.modal-content -->\n  </div><!-- /.modal-dialog -->\n</div>",
  remixEvent: {
    'click, closeButton': 'slideAway'
  },
  onNodeCreated: function() {
    return this.appendTo(document.body);
  },
  render: function(data) {
    this.refs.title.text(data.title);
    this.refs.body.empty();
    this.include(this.refs.body, data.content);
    if (data.buttons) {
      this.include(this.refs.footer, data.buttons);
      this.refs.footer.show();
    } else {
      this.refs.footer.hide();
    }
    return this.node.slideDown();
  },
  slideAway: function() {
    return this.node.slideUp(300, (function(_this) {
      return function() {
        return _this.destroy();
      };
    })(this));
  }
});

choosePort = function(callback) {
  var portDialog, portNum;
  portNum = '';
  return portDialog = Dialog({
    title: '80端口已被占用，请输入你想要的端口号',
    content: Remix.create({
      template: "<div class=\"input-group\">\n	<input type=\"text\" class=\"form-control\" ref=\"portNum\">\n	<div class=\"input-group-btn\">\n		<button type=\"button\" class=\"btn btn-primary\" tabindex=\"-1\" ref=\"okbtn\">确认</button>\n	</div>\n</div>",
      remixEvent: {
        'keyup, portNum': 'updatePortNum',
        'click, okbtn': 'savePort'
      },
      updatePortNum: function() {
        var val;
        val = this.refs.portNum.val();
        if (/[^\d]/.test(val)) {
          val = val.replace(/[^\d]/g, '');
          this.refs.portNum.val(val);
        }
        return portNum = val;
      },
      savePort: function() {
        if (portNum.length) {
          if (typeof callback === "function") {
            callback(parseInt(portNum));
          }
          return portDialog.slideAway();
        } else {
          return alert("亲");
        }
      }
    })
  });
};

configPage = Remix.create({
  template: "<div class=\"configPage\">\n	<iframe ref=\"frame\" src=\"\" frameborder=\"0\"></iframe>\n</div>",
  onNodeCreated: function() {
    return this.appendTo(document.body);
  },
  render: function(id) {
    this.reloadid = id;
    $(document.body).css('overflow-y', 'hidden');
    return this.refs.frame.attr('src', 'mordenConfig.html?id=' + id);
  },
  onDestroy: function() {
    var _ref;
    if ((_ref = LoadedItem.get(this.reloadid)) != null) {
      _ref.state.reload();
    }
    $(document.body).css('overflow-y', '');
    return global.console = window.console;
  }
});
